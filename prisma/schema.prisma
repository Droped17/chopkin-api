// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id          String     @id @default(uuid())
  firstName   String
  lastName    String?
  profileImg  String?
  memberPoint Int        @default(0)
  email       String     @unique
  phone       String     @unique
  password    String
  Bookings    Booking[]
  Reviews     Review[]
  ChatRooms   ChatRoom[]
}

model Admin {
  id        Int        @id @default(autoincrement())
  isAdmin   Int        @default(1)
  email     String     @unique
  password  String
  ChatRooms ChatRoom[]
}

model Restaurant {
  id                     String                  @id @default(uuid())
  restaurantName         String                  @unique
  ownerFirstName         String
  ownerLastName          String
  email                  String                  @unique
  phone                  String                  @unique
  password               String                  @default("1234")
  profileImg             String?
  latitude               Float?
  longitude              Float?
  price                  Int
  categoryIndex          Int
  districtIndex          Int?
  nationIndex            Int
  status                 Int                     @default(0)
  Bookings               Booking[]
  Reviews                Review[]
  RestaurantImages       RestaurantImage[]
  Packages               Package[]
  BusinessTimes          BusinessTime[]
  RestaurantPendingEdits RestaurantPendingEdit[]
  PackageEditPendings    PackageEditPending[]
}

model RestaurantPendingEdit {
  id                   Int                   @id @default(autoincrement())
  restaurantName       String                @unique
  profileImg           String?
  latitude             Float?
  longitude            Float?
  price                Int
  categoryIndex        Int
  districtIndex        Int?
  nationIndex          Int
  restaurant           Restaurant            @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId         String
  tempBusinessTimes    TempBusinessTime[]
  tempRestaurantImages TempRestaurantImage[]
}

model RestaurantImage {
  id           Int        @id @default(autoincrement())
  url          String
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model TempRestaurantImage {
  id                      Int                   @id @default(autoincrement())
  url                     String
  restaurantEditPending   RestaurantPendingEdit @relation(fields: [restaurantPendingEditId], references: [id])
  restaurantPendingEditId Int
}

model Package {
  id           Int        @id @default(autoincrement())
  name         String
  detail       String
  price        Int
  status       Int        @default(0)
  img          String?
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  Booking      Booking[]
}

model PackageEditPending {
  id           Int        @id @default(autoincrement())
  name         String
  detail       String
  price        Int
  status       Int        @default(0)
  img          String?
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Booking {
  id             String     @id @default(uuid())
  customerId     String
  customer       Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  restaurantId   String
  restaurant     Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderStatus    Int        @default(0)
  payment        Payment    @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId      String
  package        Package    @relation(fields: [packageId], references: [id])
  packageId      Int
  totalCustomer  Int
  totalKid       Int        @default(0)
  specialRequest String?
  createdAt      DateTime   @default(now())
  bookingDate    String
  bookingTime    String
  ChatRooms      ChatRoom[]
}

model Payment {
  id            String    @id @default(uuid())
  paymentStatus Int       @default(1)
  Bookings      Booking[]
}

model Review {
  id           Int           @id @default(autoincrement())
  message      String
  createAt     DateTime      @default(now())
  restaurantId String
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  customer     Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  customerId   String
  isAnonymous  Int           @default(0)
  score        Float
  ReviewImages ReviewImage[]
}

model ReviewImage {
  id       Int    @id @default(autoincrement())
  url      String
  reviewId Int
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model ChatRoom {
  id             Int      @id @default(autoincrement())
  roomIdBySocket String
  admin          Admin?   @relation(fields: [adminId], references: [id])
  adminId        Int?
  customerId     String
  customer       Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  bookingId      String?
  booking        Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model BusinessTime {
  id           Int        @id @default(autoincrement())
  day          Int
  openTime     String
  closedTime   String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
}

model TempBusinessTime {
  id                      Int                   @id @default(autoincrement())
  day                     Int
  openTime                String
  closedTime              String
  restaurantPendingEdit   RestaurantPendingEdit @relation(fields: [restaurantPendingEditId], references: [id])
  restaurantPendingEditId Int
}
