// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

generator dbml {
  provider = "prisma-dbml-generator"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Customer {
  id          String     @id
  firstName   String
  lastName    String
  profileImg  String?
  memberPoint Int
  email       String     @unique
  phone       String     @unique
  password    String
  Bookings    Booking[]
  Reviews     Review[]
  ChatRooms   ChatRoom[]
}

model Admin {
  id        String     @id
  isAdmin   Int        @default(1)
  email     String     @unique
  password  String
  ChatRooms ChatRoom[]
}

model Restaurant {
  id                    String                  @id
  restaurantName        String                  @unique
  ownerFirstName        String
  ownerLastName         String
  email                 String                  @unique
  phone                 String                  @unique
  password              String                  @default("1234")
  profileImg            String?
  latitude              String?
  longitude             String?
  price                 String
  categoryIndex         Int
  districtIndex         Int?
  nationIndex           Int
  status                Int                     @default(0)
  Bookings              Booking[]
  Reviews               Review[]
  RestaurantImages      RestaurantImage[]
  Packages              Package[]
  BusinessTime          BusinessTime[]
  RestaurantPendingEdit RestaurantPendingEdit[]
}

model RestaurantPendingEdit {
  id             Int        @id @default(autoincrement())
  restaurantName String     @unique
  profileImg     String?
  latitude       Float?
  longitude      Float?
  price          String
  categoryIndex  Int
  districtIndex  Int?
  nationIndex    Int
  restaurant     Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId   String
}

model RestaurantImage {
  id           Int        @id @default(autoincrement())
  url          String
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Package {
  id           Int        @id @default(autoincrement())
  name         String
  detail       String
  price        Int
  img          String?
  restaurantId String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
}

model Booking {
  id            String     @id
  customerId    String
  customer      Customer   @relation(fields: [customerId], references: [id], onDelete: Cascade)
  restaurantId  String
  restaurant    Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  orderStatus   Int        @default(0)
  payment       Payment    @relation(fields: [paymentId], references: [id], onDelete: Cascade)
  paymentId     String
  totalCustomer Int
  totalKid      Int
  createdAt     DateTime   @default(now())
  bookingTime   DateTime
  ChatRooms     ChatRoom[]
}

model Payment {
  id            String    @id @default(uuid())
  paymentStatus Int       @default(1)
  Booking       Booking[]
}

model Review {
  id           Int           @id @default(autoincrement())
  restaurantId String
  restaurant   Restaurant    @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  reviewerId   String
  customer     Customer      @relation(fields: [customerId], references: [id], onDelete: Cascade)
  isAnonymous  Int           @default(0)
  score        Float
  ReviewImages ReviewImage[]
  customerId   String
}

model ReviewImage {
  id       Int    @id @default(autoincrement())
  url      String
  reviewId Int
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade)
}

model ChatRoom {
  id             Int      @id @default(autoincrement())
  roomIdBySocket String
  adminId        String?
  admin          Admin?   @relation(fields: [adminId], references: [id], onDelete: Cascade)
  customerId     String
  customer       Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  bookingId      String?
  booking        Booking? @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model BusinessTime {
  id           Int        @id @default(autoincrement())
  day          Int
  openTime     String
  closedTime   String
  restaurant   Restaurant @relation(fields: [restaurantId], references: [id], onDelete: Cascade)
  restaurantId String
}
